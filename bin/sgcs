#!/usr/bin/env ruby
require 'gli'
#require 'sendgrid'
require_relative './sg'
#begin # XXX: Remove this begin/rescue before distributing your app
#rescue LoadError
#  STDERR.puts "In development, you need to use `bundle exec bin/todo` to run your app"
#  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
#  STDERR.puts "Feel free to remove this message from bin/todo now"
#  exit 64
#end

include GLI::App

program_desc 'Allows interactive use of the SendGrid customer-subuser API'

version Sendgrid::VERSION

#desc 'Describe some switch here'
#switch [:s,:switch]

#desc 'Describe some flag here'
#default_value 'the default'
#arg_name 'The name of the argument'
#flag [:f,:flagname]

desc 'SendGrid account username'
arg_name 'username'
flag [:u, :api_user]

desc 'SendGrid account password'
arg_name 'password'
flag [:p, :api_password]


desc 'Create a Subuser'
command :add do |c|
  c.desc 'The subuser\'s new username'
  c.default_value 'default'
  c.arg_name 'username'
  c.flag [:u, :username]

  c.desc 'New password of subuser'
  c.default_value 'default'
  c.arg_name 'password'
  c.flag [:p, :password]

  c.desc 'Email address of new subuser'
  c.default_value 'default@default.com'
  c.arg_name 'email'
  c.flag [:e, :email]

  c.desc 'First name of new subuser'
  c.default_value 'default'
  c.arg_name 'first_name'
  c.flag [:f, :first_name]

  c.desc 'Last name of new subuser'
  c.default_value 'default'
  c.arg_name 'last_name'
  c.flag [:l, :last_name]

  c.desc 'Address of new subuser'
  c.default_value 'default'
  c.arg_name 'address'
  c.flag [:a, :address]

  c.desc 'Address line 2 of new subuser'
  c.default_value 'default'
  c.arg_name 'address2'
  c.flag [:b, :address2]

  c.desc 'City of new subuser'
  c.default_value 'default'
  c.arg_name 'city'
  c.flag [:c, :city]

  c.desc 'State of new subuser'
  c.default_value 'default'
  c.arg_name 'state'
  c.flag [:t, :state]

  c.desc 'Zip of new subuser'
  c.default_value 'default'
  c.arg_name 'zip'
  c.flag [:z, :zip]

  c.desc 'Country of new subuser'
  c.default_value 'default'
  c.arg_name 'country'
  c.flag [:o, :country]

  c.desc 'Phone number of new subuser'
  c.default_value 'default'
  c.arg_name 'phone'
  c.flag [:h, :phone]

  c.desc 'Website of new subuser'
  c.default_value 'default'
  c.arg_name 'website'
  c.flag [:w, :website]

  c.desc 'Mail domain of new subuser'
  c.arg_name 'mail_domain'
  c.flag [:d, :mail_domain]

  c.action do |global_options,options,args|

    sg = Sg.new(global_options[:api_user], global_options[:api_password]);
    begin
      response = sg.customer_add(
        username:         options[:username],
        password:         options[:password],
        confirm_password: options[:password],
        email:            options[:email],
        first_name:       options[:first_name],
        last_name:        options[:last_name],
        address:          options[:address],
        address2:         options[:address2],
        city:             options[:city],
        state:            options[:state],
        zip:              options[:zip],
        country:          options[:country],
        phone:            options[:phone],
        website:          options[:website]);
    rescue SGerror => sge
      puts "Error:"

      if (sge.messages.respond_to?(:each))
        sge.messages.each {|msg| puts msg}
      else
        puts sge.messages;
      end
    end

    puts response
  end
end



desc 'Retrieve Subusers'
command :profile_get do |c|

  c.desc 'Search filter, subuser that is registered under you'
  c.arg_name 'username'
  c.flag [:u, :username]

  c.desc 'Search filter, email address subuser was registered with'
  c.arg_name 'email'
  c.flag [:e, :email]

  c.desc 'Search filter, whether or not the subuser is currently active'
  c.arg_name 'active'
  c.flag [:i, :active]

  c.desc 'Search filter, first name of subuser'
  c.arg_name 'first_name'
  c.flag [:f, :first_name]

  c.desc 'Search filter, last name of subuser'
  c.arg_name 'last_name'
  c.flag [:l, :last_name]

  c.desc 'Search filter, address of subuser'
  c.arg_name 'address'
  c.flag [:a, :address]

  c.desc 'Search filter, address line 2 of subuser'
  c.arg_name 'address2'
  c.flag [:b, :address2]

  c.desc 'Search filter, city of subuser'
  c.arg_name 'city'
  c.flag [:c, :city]

  c.desc 'Search filter, state of subuser'
  c.arg_name 'state'
  c.flag [:t, :state]

  c.desc 'Search filter, zipcode of subuser'
  c.arg_name 'zip'
  c.flag [:z, :zip]

  c.desc 'Search filter, country of subuser'
  c.arg_name 'country'
  c.flag [:o, :country]

  c.desc 'Search filter, phone number of subuser'
  c.arg_name 'phone'
  c.flag [:h, :phone]

  c.desc 'Search filter, website of subuser'
  c.arg_name 'website'
  c.flag [:w, :website]

  c.action do |global_options,options,args|

    sg = Sg.new(global_options[:api_user], global_options[:api_password]);
#    begin
      response = sg.customer_profile_get(
        username:         options[:username],
        email:            options[:email],
        active:           options[:active],
        first_name:       options[:first_name],
        last_name:        options[:last_name],
        address:          options[:address],
        address2:         options[:address2],
        city:             options[:city],
        state:            options[:state],
        zip:              options[:zip],
        country:          options[:country],
        phone:            options[:phone],
        website:          options[:website]);

      # customer_profile_get() returns an array of Hashes, each of which
      # decsribes a single customer.

      sg.display_response(response);

#    rescue SGerror => sge
#      puts "Error:"
#
#      if (sge.messages.respond_to?(:each))
#        sge.messages.each {|msg| puts msg}
#      else
#        puts sge.messages;
#      end
#    end
#
#    puts response
  end
end



desc 'Retrieve Customer Subuser Event Notification URL'
arg_name 'username'
command :event_url_get do |c|
  c.action do |global_options,options,args|
    if args.empty?
      raise "The 'username' argument is required, and it must match" <<
            " the 'username' value from a previous successful call" <<
            " to 'add'."
    end

    sg = Sg.new(global_options[:api_user], global_options[:api_password]);
#    begin
    response = sg.customer_event_url_get(
      user: args[0]);

    if (response == nil)
      puts("none");
    else
      puts(response);
    end

  end
end



desc 'Update Customer Subuser Event Notification URL'
arg_name 'username url'
command :event_url_set do |c|

  c.action do |global_options,options,args|
    if args.empty?
      raise "The 'username' argument is required, and it must match" <<
            " the 'username' value from a previous successful call" <<
            " to 'add'."
    end

    if (args.length < 2)
      raise "The 'url' argument is required, and it will be used as" <<
            " the specified user's new event notification URL."
    end

    sg = Sg.new(global_options[:api_user], global_options[:api_password]);
#    begin
    response = sg.customer_event_url_set(
      user: args[0],
      url:  args[1]);

    puts(response);

  end
end



desc 'Delete Customer Subuser Event Notification URL'
arg_name 'username'
command :event_url_delete do |c|

  c.action do |global_options,options,args|
    if args.empty?
      raise "The 'username' argument is required, and it must match" <<
            " the 'username' value from a previous successful call" <<
            " to 'add'."
    end

    sg = Sg.new(global_options[:api_user], global_options[:api_password]);
#    begin
    response = sg.customer_event_url_delete(
      user: args[0]);

    puts(response);

  end
end



desc 'Disable a subuser'
arg_name 'username'
command :disable do |c|
  c.action do |global_options,options,args|
    if args.empty?
      raise "The 'username' argument is required, and it must match" <<
            " the 'username' value from a previous successful call" <<
            " to 'add'."
    end

    sg = Sg.new(global_options[:api_user], global_options[:api_password]);
#    begin
    response = sg.customer_disable(
      user: args[0]);

    puts(response);

  end
end



desc 'Enable Website Access To A Subuser'
arg_name 'username'
command :website_enable do |c|
  c.action do |global_options,options,args|
    if args.empty?
      raise "The 'username' argument is required, and it must match" <<
            " the 'username' value from a previous successful call" <<
            " to 'add'."
    end

    sg = Sg.new(global_options[:api_user], global_options[:api_password]);
#    begin
    response = sg.customer_website_enable(
      user: args[0]);

    puts(response);

  end
end



desc 'Disable Website Access To A Subuser'
arg_name 'username'
command :website_disable do |c|
  c.action do |global_options,options,args|
    if args.empty?
      raise "The 'username' argument is required, and it must match" <<
            " the 'username' value from a previous successful call" <<
            " to 'add'."
    end

    sg = Sg.new(global_options[:api_user], global_options[:api_password]);
#    begin
    response = sg.customer_website_disable(
      user: args[0]);

    puts(response);

  end
end



desc 'Update Subuser'
arg_name 'username'
command :profile_set do |c|

  c.desc 'First name of subuser'
  c.arg_name 'first_name'
  c.default_value 'no_first_name'
  c.flag [:f, :first_name]

  c.desc 'Last name of subuser'
  c.arg_name 'last_name'
  c.default_value 'no_last_name'
  c.flag [:l, :last_name]

  c.desc 'Address of subuser'
  c.arg_name 'address'
  c.default_value 'no_address'
  c.flag [:a, :address]

  c.desc 'Address line 2 of subuser'
  c.arg_name 'address2'
  c.default_value 'no_address2'
  c.flag [:b, :address2]

  c.desc 'City of subuser'
  c.arg_name 'city'
  c.default_value 'no_city'
  c.flag [:c, :city]

  c.desc 'State of subuser'
  c.arg_name 'state'
  c.default_value 'no_state'
  c.flag [:t, :state]

  c.desc 'Zipcode of subuser'
  c.arg_name 'zip'
  c.default_value 'no_zip'
  c.flag [:z, :zip]

  c.desc 'Country of subuser'
  c.arg_name 'country'
  c.default_value 'no_country'
  c.flag [:o, :country]

  c.desc 'Phone number of subuser'
  c.arg_name 'phone'
  c.default_value 'no_phone'
  c.flag [:h, :phone]

  c.desc 'Website of subuser'
  c.arg_name 'website'
  c.default_value 'no_website'
  c.flag [:w, :website]

  c.action do |global_options,options,args|
    if args.empty?
      raise "The 'username' argument is required, and it must match" <<
            " the 'username' value from a previous successful call" <<
            " to 'add'."
    end

    sg = Sg.new(global_options[:api_user], global_options[:api_password]);
    begin
      response = sg.customer_profile_set(
        user:             args[0],
        email:            options[:email],
        active:           options[:active],
        first_name:       options[:first_name],
        last_name:        options[:last_name],
        address:          options[:address],
        address2:         options[:address2],
        city:             options[:city],
        state:            options[:state],
        zip:              options[:zip],
        country:          options[:country],
        phone:            options[:phone],
        website:          options[:website]);
    rescue SGerror => sge
      puts "Error:"

      if (sge.messages.respond_to?(:each))
        sge.messages.each {|msg| puts msg}
      else
        puts sge.messages;
      end
    end

    puts response
  end
end



desc 'Update Subuser Password'
arg_name 'username new_password'
command :password do |c|

  c.action do |global_options,options,args|
    if args.empty?
      raise "The 'username' argument is required, and it must match" <<
            " the 'username' value from a previous successful call" <<
            " to 'add'."
    end

    if (args.length < 2)
      raise "The 'new_password' argument is required, and it will" <<
            " be used as the specified user's new password."
    end

    sg = Sg.new(global_options[:api_user], global_options[:api_password]);

    begin
      response = sg.customer_password(
        user:             args[0],
        password:         args[1],
        confirm_password: args[1]);
    rescue SGerror => sge
      puts "Error:"

      if (sge.messages.respond_to?(:each))
        sge.messages.each {|msg| puts msg}
      else
        puts sge.messages;
      end
    end

    puts response
  end
end



desc 'Update Subuser Username'
arg_name 'old_username new_username'
command :username do |c|

  c.action do |global_options,options,args|
    if args.empty?
      raise "The 'old_username' argument is required, and it must match" <<
            " the 'username' value from a previous successful call" <<
            " to 'add'."
    end

    if (args.length < 2)
      raise "The 'new_username' argument is required, and it will be" <<
            " used as the specified user's new password."
    end

    sg = Sg.new(global_options[:api_user], global_options[:api_password]);
    begin
      response = sg.customer_username(
        user:             args[0],
        username:         args[1]);
    rescue SGerror => sge
      puts "Error:"

      if (sge.messages.respond_to?(:each))
        sge.messages.each {|msg| puts msg}
      else
        puts sge.messages;
      end
    end

    puts response
  end
end



desc 'Update Subuser Email Address'
arg_name 'username new_email_address'
command :email do |c|

  c.action do |global_options,options,args|
    if args.empty?
      raise "The 'username' argument is required, and it must match" <<
            " the 'username' value from a previous successful call" <<
            " to 'add'."
    end

    if (args.length < 2)
      raise "The 'new_email_address' argument is required, and it will be" <<
            " used as the specified user's new email address."
    end

    sg = Sg.new(global_options[:api_user], global_options[:api_password]);
    begin
      response = sg.customer_email(
        user:             args[0],
        email:            args[1]);
    rescue SGerror => sge
      puts "Error:"

      if (sge.messages.respond_to?(:each))
        sge.messages.each {|msg| puts msg}
      else
        puts sge.messages;
      end
    end

    puts response
  end
end



#desc 'Describe command1 here'
#arg_name 'Describe arguments to command1 here'
#command :command1 do |c|
#  c.desc 'Describe a switch to command1'
#  c.switch :s
#
#  c.desc 'Describe a flag to command1'
#  c.default_value 'default'
#  c.flag :f
#
#  c.action do |global_options,options,args|
#
#    # Your command logic here
#     
#    # If you have any errors, just raise them
#    # raise "that command made no sense"
#
#    puts "command1 command ran"
#  end
#end
#
#desc 'Describe command2 here'
#arg_name 'Describe arguments to command2 here'
#command :command2 do |c|
#  c.action do |global_options,options,args|
#    puts "command2 command ran"
#  end
#end
#
#desc 'Describe command3 here'
#arg_name 'Describe arguments to command3 here'
#command :command3 do |c|
#  c.action do |global_options,options,args|
#    puts "command3 command ran"
#  end
#end
#
#pre do |global,command,options,args|
#  # Pre logic here
#  # Return true to proceed; false to abourt and not call the
#  # chosen command
#  # Use skips_pre before a command to skip this block
#  # on that command only
#  true
#end
#
#post do |global,command,options,args|
#  # Post logic here
#  # Use skips_post before a command to skip this
#  # block on that command only
#end
#
#on_error do |exception|
#  # Error logic here
#  # return false to skip default error handling
#  true
#end

exit run(ARGV)
